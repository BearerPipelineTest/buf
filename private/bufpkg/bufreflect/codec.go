// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bufreflect

import (
	"fmt"

	"google.golang.org/protobuf/proto"
)

const defaultCodecName = "proto"

// descriptorInfoMarshaler is implemented by types generated by protoc-gen-buf-marshal-go.
type descriptorInfoMarshaler interface {
	MarshalWithDescriptorInfo() ([]byte, error)
}

// newCodec returns a new *Codec.
func newCodec(opts ...CodecOption) *Codec {
	codec := &Codec{
		name: defaultCodecName,
	}
	for _, opt := range opts {
		opt(codec)
	}
	return codec
}

// Name returns the Codec's name.
func (c *Codec) Name() string {
	return c.name
}

// Marshal marshals the given value into Protobuf-serialized bytes. If
// the given value implements the DescriptorInfoMarshaler interface, the
// serialized bytes will embed DescriptorInfo so that the type can be
// decoded at runtime.
func (c *Codec) Marshal(value interface{}) ([]byte, error) {
	if message, ok := value.(descriptorInfoMarshaler); ok {
		return message.MarshalWithDescriptorInfo()
	}
	message, ok := value.(proto.Message)
	if !ok {
		return nil, fmt.Errorf("failed to marshal, message is %T, want proto.Message", value)
	}
	return proto.Marshal(message)
}

// Unmarshal unmarshals the Protobuf-serialized bytes into the given value.
func (c *Codec) Unmarshal(data []byte, value interface{}) error {
	message, ok := value.(proto.Message)
	if !ok {
		return fmt.Errorf("failed to unmarshal, message is %T, want proto.Message", value)
	}
	return proto.Unmarshal(data, message)
}
