// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-apiclientgrpc. DO NOT EDIT.

package registryv1alpha1apiclientgrpc

import (
	context "context"
	v1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/image/v1"
	v1alpha11 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/reflect/v1alpha1"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
	zap "go.uber.org/zap"
)

type reflectionService struct {
	logger          *zap.Logger
	client          v1alpha1.ReflectionServiceClient
	contextModifier func(context.Context) context.Context
}

// Encode encodes descriptors into binary using either an image or
// module_info.
func (s *reflectionService) Encode(
	ctx context.Context,
	descriptorBytes []byte,
	typeName string,
	image *v1.Image,
	moduleInfo *v1alpha11.ModuleInfo,
) (result []byte, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.Encode(
		ctx,
		&v1alpha1.EncodeRequest{
			DescriptorBytes: descriptorBytes,
			TypeName:        typeName,
			Image:           image,
			ModuleInfo:      moduleInfo,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.Result, nil
}

// Decode decodes a serialized descriptor. It automatically resolves the
// image if the serialized descriptor embeds DescriptorInfo. Otherwise, it
// uses either an image or module_info to decode the payload according to
// the type_name.
func (s *reflectionService) Decode(
	ctx context.Context,
	descriptorBytes []byte,
	typeName string,
	image *v1.Image,
	moduleInfo *v1alpha11.ModuleInfo,
) (result []byte, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.Decode(
		ctx,
		&v1alpha1.DecodeRequest{
			DescriptorBytes: descriptorBytes,
			TypeName:        typeName,
			Image:           image,
			ModuleInfo:      moduleInfo,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.Result, nil
}
